Programing Language:
--------------------
It is a set of instructions and rules that a computer can understand.
ex: C, C++, C#, Python, JavaScript, Java...

Python:
-------
>>High-level, interpreted, general-purpose Programing Language.
>>It is known for its simplicity and reliability.(easy syntax, open-source, huge cummunity support.)
>>It is a Versatile Programming Language.
>>Case-sensitive

"Human written code" ---> 01 0110
Extension for a python file---> .py

Input/ Output operations.
--------------------------
When you want to show anything in output---> print()
When you want to get an Input from user ---> input() ---> return only string.

Comments In Python 
-------------------
# ---> to create a single line comment
''' ----> to create multiple lines comment

Creating a variable
----------------------
>> should be unique
>> should not start with numeric value
>> cannot use space or spacial char otherthan "_"
>> You cannot use any reserved keyword as a variable name.


Datatypes:
-----------
Integers--> -1,-2,0,1,2,3...(whole numbers)

Float--> Decimal Numbers (13.24,-90.76,1.0)

String--> Collection of characters. '',"" to create a string. conactination --> "+". Formatted String--> f''.{var}
It is an Iterable DataType. using Index number, we can access every single character. "Hello". a[ind]. Immutable

String Slicing.
---------------
iter[ind]---> value
iter[start:end]---> iter[0:6] --> 0,1,2,3,4,5
iter[ind:] --> ind,.....-1.
iter[:ind]--> 0,1,2.....(ind)

String Inbuilt Functions 
-------------------------
str.strip() ---> removes space in begenning and ending.
str.upper() ---> converts into uppercase.
str.lower() ---> converts into lowercase.
str.startswith('') ---> returns boolean value
str.endswith('') ---> returns boolean value
str.replace(old,new) --> replaces the old with new.

searching
---------
str.find('str') --> finds the index. -1 --> not found.
str.count('char') --> return the no of occurances.

Splitting and Joining
----------------------
str.split(char) --> splits the string and store it in a list.

String Formatting
------------------
str=f' {var1} {var2}'

Escape sequences
-----------------
\n ---> breaks the line.
\t ---> tab



Boolean---> True, False


Type Checking
------------
type(val)---> returns datatype of that val.

Type Casting 
-------------
int ---> str ---> str(100)--> '100'
str ---> int ---> int('100')--> 100
float --> int --> int(1.002)--> 1
int --> float --> float(1)--> 1.0



Operators:
------------
Operators are symbol used to perform an operation.

Ex: 1+2. + --> operator. 1,2---> operends.

Arithmetic Operators 
----------------------
Addition ---> + --> Ex:1+2--> 3. "str1" + "str2"(conactination).
Subtraction ---> - 
Mul --> *
Div --> /
Floor division --> // --> It will return Quotient. Ex: 10//3 --> 3
Mod ---> % ---> Reminder. Ex: 50%3--> 2, 20%10 -->0. 10%20--> 10.
Exponentiation --> ** --> base ** expo. 2 ** 3 --> 8.

BODMAS-->Brackets, Order or Of, Div, Mul, Add, Sub

Comparison Operators (will always return Bool value)
---------------------------------------------------------
== Equal to.
!= not Equal to.
> greater than
< lesser than
>= greater or equal to
<= lesser or equal to

Logical Operator  (Bool value)
-----------------
It operates with bool value and returns another bool.

AND --> and --> If both are True --> True
OR  --> or --> Any one is True --> True
NOT --> not --> Operates with one bool value--> it will just revert it.


Assignment operator 
---------------------

Assign value ---> =
Add and Assign ---> +=
Sub and Assign ---> -=
Mul and Assign ---> *=
Div and Assign ---> /=
Mod and Assign ---> %=
Exponentiate and Assign ---> **=

Bitwise Operator
------------------

AND --> & --> It just perform and operation with each bits. Ex: 3 & 4 --> 0.
OR --> | --> It just perform or operation with each bits. Ex: 7 | 2 --> 0.
XOR --> ^ --> It just perform x-or operation with each bits. Ex: 7 ^ 2 --> 5.
NOT ---> ~ --> Inverts all bits... Ex: ~2 --> -3. ~x=-(x+1).
Left Shift --> num << count ---> shifts all bits to left and adds 0's on right.
Right shift --> num >> count --> shifts all bits to right.


Control flow
-------------
Control flow means deciding block of code should run depending on certein condition.

if ---> Runs a vlock if a condition is True.
else --> it comes only after if block. Runs if the first if  condition is False

if condition:
    block of code1.
    block
    block
elif condition:
    block
elif condition:
    block
elif condition:
    block
elif condition:
    block
elif condition:
    block
elif condition:
    block
else:
    block


Loops:
------
>> It is used to repeat the block of code until the condition is met.

while Loop:
------------
>> it keeps iterating the block of code as long as the given condition is True.
>> The condition is checked before every iteration.

syntax:
--------
while condition:
    block of code

For loop 
----------
>> Loops through iterable object.
Ex: String.

a="Hello" ---> a[1]

syntax:
-------
for variable in iterable_object:
    block of code.

range(start, end, steps).

Control statements:
--------------------
break ---> it will break the loop.
continue ---> it will just make the loop skip the current iteration.


Indexing and Slicing
------------------------
iter[ind]---> value
iter[start:end]---> iter[0:6] --> 0,1,2,3,4,5
iter[ind:] --> ind,.....-1.
iter[:ind]--> 0,1,2.....(ind)

Finding Length
--------------
len(str or list) ---> returns count of elements.

Data Structures
---------------

>> A way of organizing and storing data so it can be accessed and modified efficiently.


List (Iteratable)
-----
>> Mutable and allows Duplicates.
>> Store a collection of items that might need to change later.

Sytax:
-------
[1,"",True,[1,2,3]]

List Methods
-------------
.append(ele)--> adding element at the end.
.pop() ---> remove the last element
.insert(ind, ele) --> adding element at any place.
.remove(ele) --> it will detete the first occurance of that element in the list.

.sort() --> arranging in ascending order.
.reverse() --> reversing the list.

Functions
----------
>> A block of reusable code that performs a task.
>> helps avoid repetition.

Syntax:
---------
def functions_name():
    #block of code

calling:
--------
function_name()

Some In-built Functions ---> print, input, type()...

Parameters and Arguements
-------------------------
p ---> the variable we create while creating a function.
a ---> value that we assign for the parameters while we calling that function.

Return Keyword 
--------------
>> to break a function.
>> This will return a value to the caller.

Scopes
------
Local Scope--> defined inside a function, accesible only inside that function.
Global Scope --> defined outside of function, accesible anywhere

Exception handling:
--------------------
>> Exception is an error that distrupts the normal flow.

try:
   #block  of code 
except nameOfError:
   #block of code
except nameOfError:
   #block of code 
finally:
   #block of code

File Handling 
-------------
>> Manipulate files programatically(python).

Open a file --> open('address', 'mode')
Close a file ---> file.close()
to Read a file ---> read()

write or append a file ---> write("content")

mode
-----
'r' ---> reading the file.
'w' ---> over-write the file
'a' ---> append mode